# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcRUUHJK96RkuGO3JJTSPQBJk1f6mK4p
"""

#Description : Installing required libraries
!pip install yfinance
!pip install yahoofinancials
!pip install pandas_datareader

#Description : Importing libraries
import pandas as pd
import numpy as np
import yfinance as yf
from yahoofinancials import YahooFinancials
import matplotlib.pyplot as plt
import pandas_datareader as web
import scipy.optimize as sco

#Description : Creating stock symbols
assets=['GOOG', 'NFLX', 'FB', 'AMZN', 'AAPL']

#Description : Getting stock start date
stockStartDate='2020-1-1'

#Description : Getting stock end date
stockEndDate='2022-1-1'

#Description : Downloading stock data
data=yf.download(assets, start=stockStartDate, end=stockEndDate) 
data.head()

#Description : Creating a dataframe and storing stock closing price
df=pd.DataFrame(data)['Close']
df.head()

#Description : Visualising stock prices over time
plt.figure(figsize=(15, 6))

for i in df.columns.values:
    plt.plot(df.index, df[i], lw=2, alpha=1,label=i)
plt.legend(loc='upper left', fontsize=12)
plt.ylabel('price in $')

"""**PORTFOLIO OPTIMISATION FOR LOW RISK-LOW RETURN USING NORMAL VARIANCE AND MONTE CARLO SIMULATION**"""

daily_returns = df.pct_change()
plt.figure(figsize=(15, 6))
for i in daily_returns.columns.values:
    plt.plot(daily_returns.index, daily_returns[i], lw=2, alpha=0.9,label=i)
plt.legend(loc='lower right', fontsize=12)
plt.ylabel('daily returns')

def annualised_performance(weights, mean_returns, cov_matrix):
    port_returns = np.sum(mean_returns*weights ) *252
    port_vol = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)
    return port_vol, port_returns

#Description : Monte Carlo Simulation Code
def mc_simulated_portfolios(num_port, mean_returns, cov_matrix, risk_free_rate):
    results = np.zeros((3,num_port))
    weights_record = []
    for i in range(num_port):
        weights = np.random.random(5)
        weights /= np.sum(weights)
        weights_record.append(weights)
        port_std_dev, port_return = annualised_performance(weights, mean_returns, cov_matrix)
        results[0,i] = port_std_dev
        results[1,i] = port_return
        results[2,i] = (port_return - risk_free_rate) / port_std_dev  ### Risk-Adjusted Return
    return results, weights_record

#Description : Enter Risk-Free Rate and Number of Random Porfolio in the Simulation
mean_returns = daily_returns.mean()
cov_matrix = daily_returns.cov()
num_port = int(input('Enter the number of Random Portfolios: '))
risk_free_rate = float(input('Enter the risk-free rate: '))

def mc_simulated_efs(mean_returns, cov_matrix, num_port, risk_free_rate):
    results, weights = mc_simulated_portfolios(num_port,mean_returns, cov_matrix, risk_free_rate)
    
    min_vol_idx = np.argmin(results[0])
    sdp_min, rp_min = results[0,min_vol_idx], results[1,min_vol_idx]
    min_vol_allocation = pd.DataFrame(weights[min_vol_idx],index=df.columns,columns=['Stock_allocation'])
    min_vol_allocation.Stock_allocation = [round(i*100,2)for i in min_vol_allocation.Stock_allocation]
    min_vol_allocation = min_vol_allocation.T
    
    print ("-"*40)
    print ("Minimum Volatility Portfolio Allocation\n")
    print ("Annualised Return:", round(rp_min,2))
    print ("Annualised Volatility:", round(sdp_min,2))
    print ("\n")
    print (min_vol_allocation)

mc_simulated_efs(mean_returns, cov_matrix, num_port, risk_free_rate)

"""OUTPUT : This portfolio allocation corresponds to the minimum volatility/risk

**PORTFOLIO OPTIMISATION FOR HIGH RETURN USING SHARPE RATIO**
"""

pip install PyPortfolioOpt

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

def sharpe_ratio_efs(mean_returns, cov_matrix, num_port, risk_free_rate):
    results, weights = mc_simulated_portfolios(num_port,mean_returns, cov_matrix, risk_free_rate)
    
    max_sharpe_idx = np.argmax(results[2])
    sdp, rp = results[0,max_sharpe_idx], results[1,max_sharpe_idx]
    max_sharpe_allocation = pd.DataFrame(weights[max_sharpe_idx],index=df.columns,columns=['Stock_allocation'])
    max_sharpe_allocation.Stock_allocation = [round(i*100,2)for i in max_sharpe_allocation.Stock_allocation]
    max_sharpe_allocation = max_sharpe_allocation.T
    print ("-"*40)
    print ("Maximum Sharpe-Ratio Portfolio Allocation\n")
    print ("Annualised Return:", round(rp,2))
    print ("Annualised Volatility:", round(sdp,2))
    print ("Maximum Sharp-Ratio:", round(results[2, max_sharpe_idx],2))
    print ("\n")
    print (max_sharpe_allocation)

sharpe_ratio_efs(mean_returns, cov_matrix, num_port, risk_free_rate)

"""OUTCOME : This portfoio allocation corresponds to maximum Sharpe-Ratio."""